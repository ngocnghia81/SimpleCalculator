<?xml version="1.0"?>
<testResults>
  <FitNesseVersion>v20250223</FitNesseVersion>
  <rootPath>CalculatorTests.MultiplicationTest</rootPath>
  <result>
    <counts>
      <right>4</right>
      <wrong>4</wrong>
      <ignores>0</ignores>
      <exceptions>4</exceptions>
    </counts>
    <date>2025-05-24T23:50:57+07:00</date>
    <runTimeInMillis>23</runTimeInMillis>
    <content>&lt;br/&gt;&lt;h3 id="0"&gt;Multiplication Test&lt;/h3&gt;
&lt;br/&gt;This test verifies that the Calculator can multiply two numbers correctly.&lt;br/&gt;&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;import&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;&lt;span class="pass"&gt;com.example.fixtures&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td colspan="5"&gt;&lt;span class="pass"&gt;calculator fixture&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;first number&lt;/td&gt;
		&lt;td&gt;second number&lt;/td&gt;
		&lt;td&gt;multiply?&lt;/td&gt;
		&lt;td&gt;result?&lt;/td&gt;
		&lt;td&gt;result equals?&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor1"&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;3&lt;/td&gt;
		&lt;td&gt;[&lt;span class="diff"&gt;/__VOID__/&lt;/span&gt;] &lt;span class="fail"&gt;expected [&lt;span class="diff"&gt;true&lt;/span&gt;]&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&lt;span class="pass"&gt;15&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;true &lt;span class="error"&gt;No Method resultEquals[0] in class com.example.fixtures.CalculatorFixture.
 Available methods:
add() -&amp;gt; void
andIAdd() -&amp;gt; void
andIDivide() -&amp;gt; void
andIMultiply() -&amp;gt; void
andISetSecondNumberTo(int) -&amp;gt; void
andISubtract() -&amp;gt; void
calc(java.lang.String) -&amp;gt; int
divide() -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
firstNumber() -&amp;gt; int
getClass() -&amp;gt; class java.lang.Class
givenCalculator() -&amp;gt; class com.example.fixtures.CalculatorFixture
hashCode() -&amp;gt; int
multiply() -&amp;gt; void
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
result() -&amp;gt; int
resultEquals(int) -&amp;gt; boolean
secondNumber() -&amp;gt; int
setFirstNumber(int) -&amp;gt; void
setSecondNumber(int) -&amp;gt; void
subtract() -&amp;gt; void
thenResultShouldBe(int) -&amp;gt; boolean
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
whenISetFirstNumberTo(int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;10&lt;/td&gt;
		&lt;td&gt;20&lt;/td&gt;
		&lt;td&gt;[&lt;span class="diff"&gt;/__VOID__/&lt;/span&gt;] &lt;span class="fail"&gt;expected [&lt;span class="diff"&gt;true&lt;/span&gt;]&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&lt;span class="pass"&gt;200&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;true &lt;span class="error"&gt;No Method resultEquals[0] in class com.example.fixtures.CalculatorFixture.
 Available methods:
add() -&amp;gt; void
andIAdd() -&amp;gt; void
andIDivide() -&amp;gt; void
andIMultiply() -&amp;gt; void
andISetSecondNumberTo(int) -&amp;gt; void
andISubtract() -&amp;gt; void
calc(java.lang.String) -&amp;gt; int
divide() -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
firstNumber() -&amp;gt; int
getClass() -&amp;gt; class java.lang.Class
givenCalculator() -&amp;gt; class com.example.fixtures.CalculatorFixture
hashCode() -&amp;gt; int
multiply() -&amp;gt; void
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
result() -&amp;gt; int
resultEquals(int) -&amp;gt; boolean
secondNumber() -&amp;gt; int
setFirstNumber(int) -&amp;gt; void
setSecondNumber(int) -&amp;gt; void
subtract() -&amp;gt; void
thenResultShouldBe(int) -&amp;gt; boolean
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
whenISetFirstNumberTo(int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor1"&gt;
		&lt;td&gt;0&lt;/td&gt;
		&lt;td&gt;0&lt;/td&gt;
		&lt;td&gt;[&lt;span class="diff"&gt;/__VOID__/&lt;/span&gt;] &lt;span class="fail"&gt;expected [&lt;span class="diff"&gt;true&lt;/span&gt;]&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&lt;span class="pass"&gt;0&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;true &lt;span class="error"&gt;No Method resultEquals[0] in class com.example.fixtures.CalculatorFixture.
 Available methods:
add() -&amp;gt; void
andIAdd() -&amp;gt; void
andIDivide() -&amp;gt; void
andIMultiply() -&amp;gt; void
andISetSecondNumberTo(int) -&amp;gt; void
andISubtract() -&amp;gt; void
calc(java.lang.String) -&amp;gt; int
divide() -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
firstNumber() -&amp;gt; int
getClass() -&amp;gt; class java.lang.Class
givenCalculator() -&amp;gt; class com.example.fixtures.CalculatorFixture
hashCode() -&amp;gt; int
multiply() -&amp;gt; void
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
result() -&amp;gt; int
resultEquals(int) -&amp;gt; boolean
secondNumber() -&amp;gt; int
setFirstNumber(int) -&amp;gt; void
setSecondNumber(int) -&amp;gt; void
subtract() -&amp;gt; void
thenResultShouldBe(int) -&amp;gt; boolean
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
whenISetFirstNumberTo(int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;-5&lt;/td&gt;
		&lt;td&gt;5&lt;/td&gt;
		&lt;td&gt;[&lt;span class="diff"&gt;/__VOID__/&lt;/span&gt;] &lt;span class="fail"&gt;expected [&lt;span class="diff"&gt;true&lt;/span&gt;]&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;&lt;span class="pass"&gt;-25&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;true &lt;span class="error"&gt;No Method resultEquals[0] in class com.example.fixtures.CalculatorFixture.
 Available methods:
add() -&amp;gt; void
andIAdd() -&amp;gt; void
andIDivide() -&amp;gt; void
andIMultiply() -&amp;gt; void
andISetSecondNumberTo(int) -&amp;gt; void
andISubtract() -&amp;gt; void
calc(java.lang.String) -&amp;gt; int
divide() -&amp;gt; void
equals(java.lang.Object) -&amp;gt; boolean
firstNumber() -&amp;gt; int
getClass() -&amp;gt; class java.lang.Class
givenCalculator() -&amp;gt; class com.example.fixtures.CalculatorFixture
hashCode() -&amp;gt; int
multiply() -&amp;gt; void
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
result() -&amp;gt; int
resultEquals(int) -&amp;gt; boolean
secondNumber() -&amp;gt; int
setFirstNumber(int) -&amp;gt; void
setSecondNumber(int) -&amp;gt; void
subtract() -&amp;gt; void
thenResultShouldBe(int) -&amp;gt; boolean
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void
whenISetFirstNumberTo(int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
</content>
    <relativePageName>MultiplicationTest</relativePageName>
    <instructions>
      <instructionResult>
        <instruction>{id='import_0_0', instruction='import', path='com.example.fixtures'}</instruction>
        <slimResult>pass(com.example.fixtures)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>import_0_0</instructionId>
          <col>0</col>
          <row>1</row>
          <type>ImportExpectation</type>
          <evaluationMessage>com.example.fixtures</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_0', instruction='make', instanceName='decisionTable_1', className='CalculatorFixture', args=[]}</instruction>
        <slimResult>pass(calculator fixture)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>decisionTable_1_0</instructionId>
          <col>0</col>
          <row>0</row>
          <type>ConstructionExpectation</type>
          <evaluationMessage>calculator fixture</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_4', instruction='call', instanceName='decisionTable_1', methodName='setFirstNumber', args=[5]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>decisionTable_1_4</instructionId>
          <col>0</col>
          <row>2</row>
          <type>VoidReturnExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_5', instruction='call', instanceName='decisionTable_1', methodName='setSecondNumber', args=[3]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>decisionTable_1_5</instructionId>
          <col>1</col>
          <row>2</row>
          <type>VoidReturnExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_7', instruction='call', instanceName='decisionTable_1', methodName='multiply', args=[]}</instruction>
        <slimResult>fail(a=/__VOID__/;e=true)</slimResult>
        <expectation>
          <status>fail</status>
          <instructionId>decisionTable_1_7</instructionId>
          <col>2</col>
          <row>2</row>
          <type>ReturnedValueExpectation</type>
          <actual>/__VOID__/</actual>
          <expected>true</expected>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_8', instruction='call', instanceName='decisionTable_1', methodName='result', args=[]}</instruction>
        <slimResult>pass(15)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>decisionTable_1_8</instructionId>
          <col>3</col>
          <row>2</row>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>15</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_9', instruction='call', instanceName='decisionTable_1', methodName='resultEquals', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>decisionTable_1_9</instructionId>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>No Method resultEquals[0] in class com.example.fixtures.CalculatorFixture.
 Available methods:
add() -&gt; void
andIAdd() -&gt; void
andIDivide() -&gt; void
andIMultiply() -&gt; void
andISetSecondNumberTo(int) -&gt; void
andISubtract() -&gt; void
calc(java.lang.String) -&gt; int
divide() -&gt; void
equals(java.lang.Object) -&gt; boolean
firstNumber() -&gt; int
getClass() -&gt; class java.lang.Class
givenCalculator() -&gt; class com.example.fixtures.CalculatorFixture
hashCode() -&gt; int
multiply() -&gt; void
notify() -&gt; void
notifyAll() -&gt; void
result() -&gt; int
resultEquals(int) -&gt; boolean
secondNumber() -&gt; int
setFirstNumber(int) -&gt; void
setSecondNumber(int) -&gt; void
subtract() -&gt; void
thenResultShouldBe(int) -&gt; boolean
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
whenISetFirstNumberTo(int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_11', instruction='call', instanceName='decisionTable_1', methodName='setFirstNumber', args=[10]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>decisionTable_1_11</instructionId>
          <col>0</col>
          <row>3</row>
          <type>VoidReturnExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_12', instruction='call', instanceName='decisionTable_1', methodName='setSecondNumber', args=[20]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>decisionTable_1_12</instructionId>
          <col>1</col>
          <row>3</row>
          <type>VoidReturnExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_14', instruction='call', instanceName='decisionTable_1', methodName='multiply', args=[]}</instruction>
        <slimResult>fail(a=/__VOID__/;e=true)</slimResult>
        <expectation>
          <status>fail</status>
          <instructionId>decisionTable_1_14</instructionId>
          <col>2</col>
          <row>3</row>
          <type>ReturnedValueExpectation</type>
          <actual>/__VOID__/</actual>
          <expected>true</expected>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_15', instruction='call', instanceName='decisionTable_1', methodName='result', args=[]}</instruction>
        <slimResult>pass(200)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>decisionTable_1_15</instructionId>
          <col>3</col>
          <row>3</row>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>200</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_16', instruction='call', instanceName='decisionTable_1', methodName='resultEquals', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>decisionTable_1_16</instructionId>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>No Method resultEquals[0] in class com.example.fixtures.CalculatorFixture.
 Available methods:
add() -&gt; void
andIAdd() -&gt; void
andIDivide() -&gt; void
andIMultiply() -&gt; void
andISetSecondNumberTo(int) -&gt; void
andISubtract() -&gt; void
calc(java.lang.String) -&gt; int
divide() -&gt; void
equals(java.lang.Object) -&gt; boolean
firstNumber() -&gt; int
getClass() -&gt; class java.lang.Class
givenCalculator() -&gt; class com.example.fixtures.CalculatorFixture
hashCode() -&gt; int
multiply() -&gt; void
notify() -&gt; void
notifyAll() -&gt; void
result() -&gt; int
resultEquals(int) -&gt; boolean
secondNumber() -&gt; int
setFirstNumber(int) -&gt; void
setSecondNumber(int) -&gt; void
subtract() -&gt; void
thenResultShouldBe(int) -&gt; boolean
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
whenISetFirstNumberTo(int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_18', instruction='call', instanceName='decisionTable_1', methodName='setFirstNumber', args=[0]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>decisionTable_1_18</instructionId>
          <col>0</col>
          <row>4</row>
          <type>VoidReturnExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_19', instruction='call', instanceName='decisionTable_1', methodName='setSecondNumber', args=[0]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>decisionTable_1_19</instructionId>
          <col>1</col>
          <row>4</row>
          <type>VoidReturnExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_21', instruction='call', instanceName='decisionTable_1', methodName='multiply', args=[]}</instruction>
        <slimResult>fail(a=/__VOID__/;e=true)</slimResult>
        <expectation>
          <status>fail</status>
          <instructionId>decisionTable_1_21</instructionId>
          <col>2</col>
          <row>4</row>
          <type>ReturnedValueExpectation</type>
          <actual>/__VOID__/</actual>
          <expected>true</expected>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_22', instruction='call', instanceName='decisionTable_1', methodName='result', args=[]}</instruction>
        <slimResult>pass(0)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>decisionTable_1_22</instructionId>
          <col>3</col>
          <row>4</row>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>0</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_23', instruction='call', instanceName='decisionTable_1', methodName='resultEquals', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>decisionTable_1_23</instructionId>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>No Method resultEquals[0] in class com.example.fixtures.CalculatorFixture.
 Available methods:
add() -&gt; void
andIAdd() -&gt; void
andIDivide() -&gt; void
andIMultiply() -&gt; void
andISetSecondNumberTo(int) -&gt; void
andISubtract() -&gt; void
calc(java.lang.String) -&gt; int
divide() -&gt; void
equals(java.lang.Object) -&gt; boolean
firstNumber() -&gt; int
getClass() -&gt; class java.lang.Class
givenCalculator() -&gt; class com.example.fixtures.CalculatorFixture
hashCode() -&gt; int
multiply() -&gt; void
notify() -&gt; void
notifyAll() -&gt; void
result() -&gt; int
resultEquals(int) -&gt; boolean
secondNumber() -&gt; int
setFirstNumber(int) -&gt; void
setSecondNumber(int) -&gt; void
subtract() -&gt; void
thenResultShouldBe(int) -&gt; boolean
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
whenISetFirstNumberTo(int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_25', instruction='call', instanceName='decisionTable_1', methodName='setFirstNumber', args=[-5]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>decisionTable_1_25</instructionId>
          <col>0</col>
          <row>5</row>
          <type>VoidReturnExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_26', instruction='call', instanceName='decisionTable_1', methodName='setSecondNumber', args=[5]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <instructionId>decisionTable_1_26</instructionId>
          <col>1</col>
          <row>5</row>
          <type>VoidReturnExpectation</type>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_28', instruction='call', instanceName='decisionTable_1', methodName='multiply', args=[]}</instruction>
        <slimResult>fail(a=/__VOID__/;e=true)</slimResult>
        <expectation>
          <status>fail</status>
          <instructionId>decisionTable_1_28</instructionId>
          <col>2</col>
          <row>5</row>
          <type>ReturnedValueExpectation</type>
          <actual>/__VOID__/</actual>
          <expected>true</expected>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_29', instruction='call', instanceName='decisionTable_1', methodName='result', args=[]}</instruction>
        <slimResult>pass(-25)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>decisionTable_1_29</instructionId>
          <col>3</col>
          <row>5</row>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>-25</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_1_30', instruction='call', instanceName='decisionTable_1', methodName='resultEquals', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>decisionTable_1_30</instructionId>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>No Method resultEquals[0] in class com.example.fixtures.CalculatorFixture.
 Available methods:
add() -&gt; void
andIAdd() -&gt; void
andIDivide() -&gt; void
andIMultiply() -&gt; void
andISetSecondNumberTo(int) -&gt; void
andISubtract() -&gt; void
calc(java.lang.String) -&gt; int
divide() -&gt; void
equals(java.lang.Object) -&gt; boolean
firstNumber() -&gt; int
getClass() -&gt; class java.lang.Class
givenCalculator() -&gt; class com.example.fixtures.CalculatorFixture
hashCode() -&gt; int
multiply() -&gt; void
notify() -&gt; void
notifyAll() -&gt; void
result() -&gt; int
resultEquals(int) -&gt; boolean
secondNumber() -&gt; int
setFirstNumber(int) -&gt; void
setSecondNumber(int) -&gt; void
subtract() -&gt; void
thenResultShouldBe(int) -&gt; boolean
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void
whenISetFirstNumberTo(int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
    </instructions>
  </result>
  <finalCounts>
    <right>0</right>
    <wrong>1</wrong>
    <ignores>0</ignores>
    <exceptions>0</exceptions>
  </finalCounts>
  <totalRunTimeInMillis>23</totalRunTimeInMillis>
</testResults>

